
led_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001124  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080012b8  080012b8  000112b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001300  08001300  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001300  08001300  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001300  08001300  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001300  08001300  00011300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001304  08001304  00011304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000060  08001368  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08001368  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dd1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000586  00000000  00000000  00020ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00021430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000163  00000000  00000000  00021628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dc3  00000000  00000000  0002178b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c3e  00000000  00000000  0002454e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009d46  00000000  00000000  0002618c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d00  00000000  00000000  0002fed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00030bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000060 	.word	0x20000060
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080012a0 	.word	0x080012a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000064 	.word	0x20000064
 80001d0:	080012a0 	.word	0x080012a0

080001d4 <led_init_all>:
void delay(uint32_t count){
	for(uint32_t i=0;i<count;i++);

}

void led_init_all(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001da:	4b19      	ldr	r3, [pc, #100]	; (8000240 <led_init_all+0x6c>)
 80001dc:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020400;//0x40020C00;
 80001de:	4b19      	ldr	r3, [pc, #100]	; (8000244 <led_init_all+0x70>)
 80001e0:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= (1<<1);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0202 	orr.w	r2, r3, #2
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= (1<<(2*LED_GREEN));
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= (1<<(2*LED_ORANGE));
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= (1<<(2*LED_RED));
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= (1<<(2*LED_BLUE));
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= (1<<(2*LED_ORANGE));
	*pGpioOpTypeReg |= (1<<(2*LED_RED));
	*pGpioOpTypeReg |= (1<<(2*LED_BLUE));
#endif

	led_off(LED_GREEN);
 800021e:	2008      	movs	r0, #8
 8000220:	f000 f82a 	bl	8000278 <led_off>
	led_off(LED_ORANGE);
 8000224:	2005      	movs	r0, #5
 8000226:	f000 f827 	bl	8000278 <led_off>
	led_off(LED_RED);
 800022a:	2006      	movs	r0, #6
 800022c:	f000 f824 	bl	8000278 <led_off>
	led_off(LED_BLUE);
 8000230:	2007      	movs	r0, #7
 8000232:	f000 f821 	bl	8000278 <led_off>

}
 8000236:	bf00      	nop
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40023830 	.word	0x40023830
 8000244:	40020400 	.word	0x40020400

08000248 <led_on>:

void led_on(uint8_t led_no){
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpiodDataReg = (uint32_t*)0x40020414;//0x40020C14;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <led_on+0x2c>)
 8000254:	60fb      	str	r3, [r7, #12]
	*pGpiodDataReg |= (1<<led_no);
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	79fa      	ldrb	r2, [r7, #7]
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	431a      	orrs	r2, r3
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	601a      	str	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40020414 	.word	0x40020414

08000278 <led_off>:

void led_off(uint8_t led_no){
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpiodDataReg = (uint32_t*)0x40020414;//0x40020C14;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <led_off+0x30>)
 8000284:	60fb      	str	r3, [r7, #12]
	*pGpiodDataReg &= ~(1<<led_no);
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	79fa      	ldrb	r2, [r7, #7]
 800028c:	2101      	movs	r1, #1
 800028e:	fa01 f202 	lsl.w	r2, r1, r2
 8000292:	43d2      	mvns	r2, r2
 8000294:	401a      	ands	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	bf00      	nop
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40020414 	.word	0x40020414

080002ac <idle_task>:
TCB_t user_tasks[MAX_TASKS];




void idle_task(void){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	while(1);
 80002b0:	e7fe      	b.n	80002b0 <idle_task+0x4>

080002b2 <task1_handler>:
}


void task1_handler(void)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 80002b6:	2008      	movs	r0, #8
 80002b8:	f7ff ffc6 	bl	8000248 <led_on>
		task_delay(1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c0:	f000 f9ae 	bl	8000620 <task_delay>
		led_off(LED_GREEN);
 80002c4:	2008      	movs	r0, #8
 80002c6:	f7ff ffd7 	bl	8000278 <led_off>
		task_delay(1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ce:	f000 f9a7 	bl	8000620 <task_delay>
		led_on(LED_GREEN);
 80002d2:	e7f0      	b.n	80002b6 <task1_handler+0x4>

080002d4 <task2_handler>:

	}
}

void task2_handler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_ORANGE);
 80002d8:	2005      	movs	r0, #5
 80002da:	f7ff ffb5 	bl	8000248 <led_on>
		task_delay(500);
 80002de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e2:	f000 f99d 	bl	8000620 <task_delay>
		led_off(LED_ORANGE);
 80002e6:	2005      	movs	r0, #5
 80002e8:	f7ff ffc6 	bl	8000278 <led_off>
		task_delay(500);
 80002ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f0:	f000 f996 	bl	8000620 <task_delay>
		led_on(LED_ORANGE);
 80002f4:	e7f0      	b.n	80002d8 <task2_handler+0x4>

080002f6 <task3_handler>:
	}
}

void task3_handler(void)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 80002fa:	2007      	movs	r0, #7
 80002fc:	f7ff ffa4 	bl	8000248 <led_on>
		task_delay(250);
 8000300:	20fa      	movs	r0, #250	; 0xfa
 8000302:	f000 f98d 	bl	8000620 <task_delay>
		led_off(LED_BLUE);
 8000306:	2007      	movs	r0, #7
 8000308:	f7ff ffb6 	bl	8000278 <led_off>
		task_delay(250);
 800030c:	20fa      	movs	r0, #250	; 0xfa
 800030e:	f000 f987 	bl	8000620 <task_delay>
		led_on(LED_BLUE);
 8000312:	e7f2      	b.n	80002fa <task3_handler+0x4>

08000314 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 8000318:	2006      	movs	r0, #6
 800031a:	f7ff ff95 	bl	8000248 <led_on>
		task_delay(125);
 800031e:	207d      	movs	r0, #125	; 0x7d
 8000320:	f000 f97e 	bl	8000620 <task_delay>
		led_off(LED_RED);
 8000324:	2006      	movs	r0, #6
 8000326:	f7ff ffa7 	bl	8000278 <led_off>
		task_delay(125);
 800032a:	207d      	movs	r0, #125	; 0x7d
 800032c:	f000 f978 	bl	8000620 <task_delay>
		led_on(LED_RED);
 8000330:	e7f2      	b.n	8000318 <task4_handler+0x4>
	...

08000334 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	// systick - 24bit down counter
	//syticjk eception is triggered inly after the value is reloaded into the SVR from the CVr(current value register) after the svr value reaches 0. Hence we load count value -1 into the svr so that it takes the required no. of cycles (otherwise it would rake count +1 cycles)
	uint32_t *pSRVR = (uint32_t*)0xE000E014;// a pointer variable pointing to the reload value location
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <init_systick_timer+0x60>)
 800033e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;// pointer for control and status register pointing to the systick control and status register
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <init_systick_timer+0x64>)
 8000342:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1; // also known as reload value
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <init_systick_timer+0x68>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	fbb2 f3f3 	udiv	r3, r2, r3
 800034c:	3b01      	subs	r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
	// only 24 bits are valid in this 32 bit register, rest should remain unaffected

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);// since only 24 bits are valid (reserved ones not affected)
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]

	//load the value into SVR
	*pSRVR |= count_value;
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	431a      	orrs	r2, r3
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	601a      	str	r2, [r3, #0]

	//do some settings
	// systick control and status register
	*pSCSR |= (1<<1); //Enable Systick exception request
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f043 0202 	orr.w	r2, r3, #2
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1<<2); //Indicates the clock source, processor clock source
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 0204 	orr.w	r2, r3, #4
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	601a      	str	r2, [r3, #0]

	//enable the systick
	*pSCSR |= (1<<0); //enables the counter
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f043 0201 	orr.w	r2, r3, #1
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	601a      	str	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	371c      	adds	r7, #28
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e014 	.word	0xe000e014
 8000398:	e000e010 	.word	0xe000e010
 800039c:	00f42400 	.word	0x00f42400

080003a0 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80003a0:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :  );
 80003a2:	f383 8808 	msr	MSP, r3
	__asm  volatile("BX LR");// LR has the return address, to return from function call
 80003a6:	4770      	bx	lr
}
 80003a8:	bf00      	nop
	...

080003ac <init_tasks_stack>:




void init_tasks_stack(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
	// initially all tasks in Running State
	user_tasks[0].current_state =TASK_READY_STATE;// task 0 becomes the idle task which will always be in running state
 80003b2:	4b3a      	ldr	r3, [pc, #232]	; (800049c <init_tasks_stack+0xf0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state =TASK_READY_STATE;
 80003b8:	4b38      	ldr	r3, [pc, #224]	; (800049c <init_tasks_stack+0xf0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state =TASK_READY_STATE;
 80003be:	4b37      	ldr	r3, [pc, #220]	; (800049c <init_tasks_stack+0xf0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state =TASK_READY_STATE;
 80003c6:	4b35      	ldr	r3, [pc, #212]	; (800049c <init_tasks_stack+0xf0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state =TASK_READY_STATE;
 80003ce:	4b33      	ldr	r3, [pc, #204]	; (800049c <init_tasks_stack+0xf0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 80003d6:	4b31      	ldr	r3, [pc, #196]	; (800049c <init_tasks_stack+0xf0>)
 80003d8:	4a31      	ldr	r2, [pc, #196]	; (80004a0 <init_tasks_stack+0xf4>)
 80003da:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <init_tasks_stack+0xf0>)
 80003de:	4a31      	ldr	r2, [pc, #196]	; (80004a4 <init_tasks_stack+0xf8>)
 80003e0:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <init_tasks_stack+0xf0>)
 80003e4:	4a30      	ldr	r2, [pc, #192]	; (80004a8 <init_tasks_stack+0xfc>)
 80003e6:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 80003e8:	4b2c      	ldr	r3, [pc, #176]	; (800049c <init_tasks_stack+0xf0>)
 80003ea:	4a30      	ldr	r2, [pc, #192]	; (80004ac <init_tasks_stack+0x100>)
 80003ec:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <init_tasks_stack+0xf0>)
 80003f0:	4a2f      	ldr	r2, [pc, #188]	; (80004b0 <init_tasks_stack+0x104>)
 80003f2:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 80003f4:	4b29      	ldr	r3, [pc, #164]	; (800049c <init_tasks_stack+0xf0>)
 80003f6:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <init_tasks_stack+0x108>)
 80003f8:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80003fa:	4b28      	ldr	r3, [pc, #160]	; (800049c <init_tasks_stack+0xf0>)
 80003fc:	4a2e      	ldr	r2, [pc, #184]	; (80004b8 <init_tasks_stack+0x10c>)
 80003fe:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000400:	4b26      	ldr	r3, [pc, #152]	; (800049c <init_tasks_stack+0xf0>)
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <init_tasks_stack+0x110>)
 8000404:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <init_tasks_stack+0xf0>)
 8000408:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <init_tasks_stack+0x114>)
 800040a:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 800040c:	4b23      	ldr	r3, [pc, #140]	; (800049c <init_tasks_stack+0xf0>)
 800040e:	4a2d      	ldr	r2, [pc, #180]	; (80004c4 <init_tasks_stack+0x118>)
 8000410:	64da      	str	r2, [r3, #76]	; 0x4c

	//modified version of the above commented code

	uint32_t *pPSP;//pointer to access data being stored in the stack memory

	for(int i=0;i<MAX_TASKS;i++){
 8000412:	2300      	movs	r3, #0
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	e037      	b.n	8000488 <init_tasks_stack+0xdc>

		pPSP = (uint32_t*) user_tasks[i].psp_value;//type casting
 8000418:	4a20      	ldr	r2, [pc, #128]	; (800049c <init_tasks_stack+0xf0>)
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	011b      	lsls	r3, r3, #4
 800041e:	4413      	add	r3, r2
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	60fb      	str	r3, [r7, #12]

		//stack is full descending and hence we decrement and then store the value
		pPSP--;
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3b04      	subs	r3, #4
 8000428:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x01000000
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000430:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	3b04      	subs	r3, #4
 8000436:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;// here have to store the address of task handlers
 8000438:	4a18      	ldr	r2, [pc, #96]	; (800049c <init_tasks_stack+0xf0>)
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	011b      	lsls	r3, r3, #4
 800043e:	4413      	add	r3, r2
 8000440:	330c      	adds	r3, #12
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	601a      	str	r2, [r3, #0]
		// this address should be odd since the lsb represents the t bit

		pPSP--;//LR
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3b04      	subs	r3, #4
 800044e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f06f 0202 	mvn.w	r2, #2
 8000456:	601a      	str	r2, [r3, #0]

		for (int j=0;j<13;j++){
 8000458:	2300      	movs	r3, #0
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	e008      	b.n	8000470 <init_tasks_stack+0xc4>
			pPSP--;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3b04      	subs	r3, #4
 8000462:	60fb      	str	r3, [r7, #12]
			*pPSP=0;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
		for (int j=0;j<13;j++){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3301      	adds	r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b0c      	cmp	r3, #12
 8000474:	ddf3      	ble.n	800045e <init_tasks_stack+0xb2>
		}
		// preserving the psp value
		user_tasks[i].psp_value=(uint32_t)pPSP;
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	4908      	ldr	r1, [pc, #32]	; (800049c <init_tasks_stack+0xf0>)
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	440b      	add	r3, r1
 8000480:	601a      	str	r2, [r3, #0]
	for(int i=0;i<MAX_TASKS;i++){
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	3301      	adds	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	2b04      	cmp	r3, #4
 800048c:	ddc4      	ble.n	8000418 <init_tasks_stack+0x6c>
	}
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	20000080 	.word	0x20000080
 80004a0:	2000f000 	.word	0x2000f000
 80004a4:	20010000 	.word	0x20010000
 80004a8:	2000fc00 	.word	0x2000fc00
 80004ac:	2000f800 	.word	0x2000f800
 80004b0:	2000f400 	.word	0x2000f400
 80004b4:	080002ad 	.word	0x080002ad
 80004b8:	080002b3 	.word	0x080002b3
 80004bc:	080002d5 	.word	0x080002d5
 80004c0:	080002f7 	.word	0x080002f7
 80004c4:	08000315 	.word	0x08000315

080004c8 <enable_processor_faults>:

void enable_processor_faults(void){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <enable_processor_faults+0x3c>)
 80004d0:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1<<16); // mem manage
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<17);// bus fault
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<18);// usage fault
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]

}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000ed24 	.word	0xe000ed24

08000508 <get_psp_value>:




//helper function
uint32_t get_psp_value(void){
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <get_psp_value+0x1c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <get_psp_value+0x20>)
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	4413      	add	r3, r2
 8000516:	681b      	ldr	r3, [r3, #0]

}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000
 8000528:	20000080 	.word	0x20000080

0800052c <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value=current_psp_value;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <save_psp_value+0x24>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <save_psp_value+0x28>)
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	4413      	add	r3, r2
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]

}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000080 	.word	0x20000080

08000558 <update_next_task>:

void update_next_task(void){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0

	int state = TASK_BLOCKED_STATE;
 800055e:	23ff      	movs	r3, #255	; 0xff
 8000560:	607b      	str	r3, [r7, #4]

	for(int i=0;i<MAX_TASKS;i++){
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	e022      	b.n	80005ae <update_next_task+0x56>
		current_task++;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <update_next_task+0x78>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <update_next_task+0x78>)
 8000570:	6013      	str	r3, [r2, #0]
		current_task %= MAX_TASKS;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <update_next_task+0x78>)
 8000574:	6819      	ldr	r1, [r3, #0]
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <update_next_task+0x7c>)
 8000578:	fba3 2301 	umull	r2, r3, r3, r1
 800057c:	089a      	lsrs	r2, r3, #2
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	1aca      	subs	r2, r1, r3
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <update_next_task+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <update_next_task+0x78>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <update_next_task+0x80>)
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	4413      	add	r3, r2
 8000594:	3308      	adds	r3, #8
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	607b      	str	r3, [r7, #4]
		if((state==TASK_READY_STATE) && (current_task != 0)){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <update_next_task+0x50>
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <update_next_task+0x78>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d106      	bne.n	80005b6 <update_next_task+0x5e>
	for(int i=0;i<MAX_TASKS;i++){
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	ddd9      	ble.n	8000568 <update_next_task+0x10>
 80005b4:	e000      	b.n	80005b8 <update_next_task+0x60>
			break;
 80005b6:	bf00      	nop
		}

	}
	if (state!=TASK_READY_STATE)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <update_next_task+0x6c>
		current_task = 0;
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <update_next_task+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	20000000 	.word	0x20000000
 80005d4:	cccccccd 	.word	0xcccccccd
 80005d8:	20000080 	.word	0x20000080

080005dc <switch_sp_to_psp>:
	//1. initialize the PSP with Task1 stack start address

	// get the value of psp of current_task
	//here since we use Bl, LR's initial value is corrupted which has the address of the main
	//hence the LR has to be pushed/saved before it is modified
	__asm volatile ("PUSH {LR}");// preserve LR which connects back to main()
 80005dc:	b500      	push	{lr}

	__asm volatile ("BL get_psp_value");// return value is stored in R0
 80005de:	f7ff ff93 	bl	8000508 <get_psp_value>
	__asm volatile ("MSR PSP,R0");// initialize psp
 80005e2:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");//pops back LR value
 80005e6:	f85d eb04 	ldr.w	lr, [sp], #4
	//till here everything is using MSP as stack pointer since we have not yet executed a switch

	//2. change SP to PSP using CONTROL register
	// the CONTROL register is a spl register and we have to use MSR instruction and hence this function is naked
	// in the CONTROL register (2nd bit should be 1 which is SPSEl (defines the currently active stack pointer, 0=MSP and 1=PSP)
	__asm volatile ("MOV R0,#0x02");//enables second bit
 80005ea:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80005ee:	f380 8814 	msr	CONTROL, r0

	//go back to main
	__asm volatile ("BX LR");// LR value copied to PC that connects us back to the main()
 80005f2:	4770      	bx	lr

}
 80005f4:	bf00      	nop
	...

080005f8 <schedule>:
//The prologue and epilogue associated with each procedure are “overhead” that is necessary but does not do user computation.
// epilogues is not added and hence we have to manually write instructions to make exception exit



void schedule(void){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
	//pend the pendSV exception
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <schedule+0x24>)
 8000600:	607b      	str	r3, [r7, #4]
	*pICSR |= (1<<28);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed04 	.word	0xe000ed04

08000620 <task_delay>:


void task_delay(uint32_t tick_count){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	// to be careful with global variable access
	// disable interrupt
	INTERRUPT_DISABLE();
 8000628:	f04f 0001 	mov.w	r0, #1
 800062c:	f380 8810 	msr	PRIMASK, r0

	if(current_task){
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <task_delay+0x54>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d014      	beq.n	8000662 <task_delay+0x42>
		// since we have to block only user task, this condition will not execute for current_task=0 (idle task)
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <task_delay+0x58>)
 800063a:	6819      	ldr	r1, [r3, #0]
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <task_delay+0x54>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	440a      	add	r2, r1
 8000644:	490d      	ldr	r1, [pc, #52]	; (800067c <task_delay+0x5c>)
 8000646:	011b      	lsls	r3, r3, #4
 8000648:	440b      	add	r3, r1
 800064a:	3304      	adds	r3, #4
 800064c:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <task_delay+0x54>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <task_delay+0x5c>)
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	4413      	add	r3, r2
 8000658:	3308      	adds	r3, #8
 800065a:	22ff      	movs	r2, #255	; 0xff
 800065c:	701a      	strb	r2, [r3, #0]
		schedule();// to trigger the pendSV
 800065e:	f7ff ffcb 	bl	80005f8 <schedule>
	}

	//enable interrupt
	INTERRUPT_ENABLE();
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	f380 8810 	msr	PRIMASK, r0
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000
 8000678:	2000007c 	.word	0x2000007c
 800067c:	20000080 	.word	0x20000080

08000680 <PendSV_Handler>:


		// Save the context of current task

		//1. Get current running task's PSP value
		__asm volatile ("MRS R0,PSP");
 8000680:	f3ef 8009 	mrs	r0, PSP
		//2. Using that PSP value store SF2(R4 to R11)
		//we can't use push operations from this handler as it would change the MSP
		// using store multiple instructions - STMDB (decrement and then store)
		__asm volatile ("STMDB R0!,{R4-R11}");
 8000684:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		__asm volatile ("PUSH {LR}");
 8000688:	b500      	push	{lr}

		//3. Save the current value of PSP
		__asm volatile("BL save_psp_value");// when this function is called R0's value is sent as parameter to the function
 800068a:	f7ff ff4f 	bl	800052c <save_psp_value>


		// Retrieve the context of next task

		//1. Decide next task to run
		__asm volatile("BL update_next_task");
 800068e:	f7ff ff63 	bl	8000558 <update_next_task>
		//2. get its past PSP value
		__asm volatile ("BL get_psp_value");// written value in R0
 8000692:	f7ff ff39 	bl	8000508 <get_psp_value>
		//3. Using that PSP value retrieve SF2(R4 to R11), using LOAD instruction since data moves from memory to register
		// LDMIA - load multiple registers and increment after (default)
		__asm volatile("LDMIA R0!,{R4-R11}");
 8000696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		//4. Update PSP by saving R0 to psp and exit
		__asm volatile ("MSR PSP,R0");
 800069a:	f380 8809 	msr	PSP, r0

		__asm volatile ("POP {LR}");
 800069e:	f85d eb04 	ldr.w	lr, [sp], #4

		//exit (LR copied to PC)
		__asm  volatile ("BX LR");
 80006a2:	4770      	bx	lr

}
 80006a4:	bf00      	nop
	...

080006a8 <update_global_tick_count>:

void update_global_tick_count(void){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <update_global_tick_count+0x18>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <update_global_tick_count+0x18>)
 80006b4:	6013      	str	r3, [r2, #0]
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	2000007c 	.word	0x2000007c

080006c4 <unblock_tasks>:

void unblock_tasks(void){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	//not checking for idle task i=0
	for(int i=1;i<MAX_TASKS;i++){
 80006ca:	2301      	movs	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e01b      	b.n	8000708 <unblock_tasks+0x44>
		if(user_tasks[i].current_state != TASK_READY_STATE){
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <unblock_tasks+0x58>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	3308      	adds	r3, #8
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d010      	beq.n	8000702 <unblock_tasks+0x3e>
			if(user_tasks[i].block_count == g_tick_count){
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <unblock_tasks+0x58>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	4413      	add	r3, r2
 80006e8:	3304      	adds	r3, #4
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <unblock_tasks+0x5c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d106      	bne.n	8000702 <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 80006f4:	4a09      	ldr	r2, [pc, #36]	; (800071c <unblock_tasks+0x58>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4413      	add	r3, r2
 80006fc:	3308      	adds	r3, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<MAX_TASKS;i++){
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b04      	cmp	r3, #4
 800070c:	dde0      	ble.n	80006d0 <unblock_tasks+0xc>
			}
		}
	}
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	20000080 	.word	0x20000080
 8000720:	2000007c 	.word	0x2000007c

08000724 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <SysTick_Handler+0x28>)
 800072c:	607b      	str	r3, [r7, #4]

	update_global_tick_count();
 800072e:	f7ff ffbb 	bl	80006a8 <update_global_tick_count>

	unblock_tasks();
 8000732:	f7ff ffc7 	bl	80006c4 <unblock_tasks>

	//pend the pendsv exception
	*pICSR |= (1<<28);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000ed04 	.word	0xe000ed04

08000750 <HardFault_Handler>:

//Fault Handler Codes
void HardFault_Handler(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	printf("Exception :  HardFault\n");
 8000754:	4801      	ldr	r0, [pc, #4]	; (800075c <HardFault_Handler+0xc>)
 8000756:	f000 fa0d 	bl	8000b74 <puts>
	while(1);
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0xa>
 800075c:	080012b8 	.word	0x080012b8

08000760 <MemManage_Handler>:
}

void MemManage_Handler(void){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	printf("Exception :  MemManage\n");
 8000764:	4801      	ldr	r0, [pc, #4]	; (800076c <MemManage_Handler+0xc>)
 8000766:	f000 fa05 	bl	8000b74 <puts>
	while(1);
 800076a:	e7fe      	b.n	800076a <MemManage_Handler+0xa>
 800076c:	080012d0 	.word	0x080012d0

08000770 <BusFault_Handler>:
}

void BusFault_Handler(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	printf("Exception :  BusFault\n");
 8000774:	4801      	ldr	r0, [pc, #4]	; (800077c <BusFault_Handler+0xc>)
 8000776:	f000 f9fd 	bl	8000b74 <puts>
	while(1);
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0xa>
 800077c:	080012e8 	.word	0x080012e8

08000780 <main>:
}


int main(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

	// enabling all available faults and fault handlers to trace any faults that could take place
	enable_processor_faults();
 8000784:	f7ff fea0 	bl	80004c8 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <main+0x28>)
 800078a:	f7ff fe09 	bl	80003a0 <init_scheduler_stack>
	task_handlers[3]=(uint32_t)task4_handler;
	// these are now assigned in the init_tasks_stack() itself
*/


	init_tasks_stack();
 800078e:	f7ff fe0d 	bl	80003ac <init_tasks_stack>

	led_init_all();
 8000792:	f7ff fd1f 	bl	80001d4 <led_init_all>


	init_systick_timer(TICK_HZ);
 8000796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079a:	f7ff fdcb 	bl	8000334 <init_systick_timer>


	// till here the code is using MSP as stack pointer
	// we can call the task1_handler here
	// hence the stack pointer has to be changed to PSP, since tasks should run in the Thread mode
	switch_sp_to_psp();
 800079e:	f7ff ff1d 	bl	80005dc <switch_sp_to_psp>

	//first task getting launched from the main we can also use an svc instruction to launch
	task1_handler();
 80007a2:	f7ff fd86 	bl	80002b2 <task1_handler>


	for(;;);
 80007a6:	e7fe      	b.n	80007a6 <main+0x26>
 80007a8:	2000ec00 	.word	0x2000ec00

080007ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	e00a      	b.n	80007d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007be:	f3af 8000 	nop.w
 80007c2:	4601      	mov	r1, r0
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	60ba      	str	r2, [r7, #8]
 80007ca:	b2ca      	uxtb	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3301      	adds	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dbf0      	blt.n	80007be <_read+0x12>
  }

  return len;
 80007dc:	687b      	ldr	r3, [r7, #4]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e009      	b.n	800080c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	60ba      	str	r2, [r7, #8]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbf1      	blt.n	80007f8 <_write+0x12>
  }
  return len;
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_close>:

int _close(int file)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000846:	605a      	str	r2, [r3, #4]
  return 0;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_isatty>:

int _isatty(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <_sbrk+0x5c>)
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <_sbrk+0x60>)
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <_sbrk+0x64>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <_sbrk+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d207      	bcs.n	80008c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b8:	f000 fa8a 	bl	8000dd0 <__errno>
 80008bc:	4603      	mov	r3, r0
 80008be:	220c      	movs	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	e009      	b.n	80008dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <_sbrk+0x64>)
 80008d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20010000 	.word	0x20010000
 80008e8:	00000400 	.word	0x00000400
 80008ec:	200000d0 	.word	0x200000d0
 80008f0:	20000220 	.word	0x20000220

080008f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000922:	f000 fa5b 	bl	8000ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff ff2b 	bl	8000780 <main>

0800092a <LoopForever>:

LoopForever:
  b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   r0, =_estack
 800092c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000938:	08001308 	.word	0x08001308
  ldr r2, =_sbss
 800093c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000940:	20000220 	.word	0x20000220

08000944 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC_IRQHandler>
	...

08000948 <std>:
 8000948:	2300      	movs	r3, #0
 800094a:	b510      	push	{r4, lr}
 800094c:	4604      	mov	r4, r0
 800094e:	e9c0 3300 	strd	r3, r3, [r0]
 8000952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000956:	6083      	str	r3, [r0, #8]
 8000958:	8181      	strh	r1, [r0, #12]
 800095a:	6643      	str	r3, [r0, #100]	; 0x64
 800095c:	81c2      	strh	r2, [r0, #14]
 800095e:	6183      	str	r3, [r0, #24]
 8000960:	4619      	mov	r1, r3
 8000962:	2208      	movs	r2, #8
 8000964:	305c      	adds	r0, #92	; 0x5c
 8000966:	f000 f9e5 	bl	8000d34 <memset>
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <std+0x58>)
 800096c:	6263      	str	r3, [r4, #36]	; 0x24
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <std+0x5c>)
 8000970:	62a3      	str	r3, [r4, #40]	; 0x28
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <std+0x60>)
 8000974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <std+0x64>)
 8000978:	6323      	str	r3, [r4, #48]	; 0x30
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <std+0x68>)
 800097c:	6224      	str	r4, [r4, #32]
 800097e:	429c      	cmp	r4, r3
 8000980:	d006      	beq.n	8000990 <std+0x48>
 8000982:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000986:	4294      	cmp	r4, r2
 8000988:	d002      	beq.n	8000990 <std+0x48>
 800098a:	33d0      	adds	r3, #208	; 0xd0
 800098c:	429c      	cmp	r4, r3
 800098e:	d105      	bne.n	800099c <std+0x54>
 8000990:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000998:	f000 ba44 	b.w	8000e24 <__retarget_lock_init_recursive>
 800099c:	bd10      	pop	{r4, pc}
 800099e:	bf00      	nop
 80009a0:	08000b85 	.word	0x08000b85
 80009a4:	08000ba7 	.word	0x08000ba7
 80009a8:	08000bdf 	.word	0x08000bdf
 80009ac:	08000c03 	.word	0x08000c03
 80009b0:	200000d4 	.word	0x200000d4

080009b4 <stdio_exit_handler>:
 80009b4:	4a02      	ldr	r2, [pc, #8]	; (80009c0 <stdio_exit_handler+0xc>)
 80009b6:	4903      	ldr	r1, [pc, #12]	; (80009c4 <stdio_exit_handler+0x10>)
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <stdio_exit_handler+0x14>)
 80009ba:	f000 b869 	b.w	8000a90 <_fwalk_sglue>
 80009be:	bf00      	nop
 80009c0:	20000004 	.word	0x20000004
 80009c4:	08001129 	.word	0x08001129
 80009c8:	20000010 	.word	0x20000010

080009cc <cleanup_stdio>:
 80009cc:	6841      	ldr	r1, [r0, #4]
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <cleanup_stdio+0x34>)
 80009d0:	4299      	cmp	r1, r3
 80009d2:	b510      	push	{r4, lr}
 80009d4:	4604      	mov	r4, r0
 80009d6:	d001      	beq.n	80009dc <cleanup_stdio+0x10>
 80009d8:	f000 fba6 	bl	8001128 <_fflush_r>
 80009dc:	68a1      	ldr	r1, [r4, #8]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <cleanup_stdio+0x38>)
 80009e0:	4299      	cmp	r1, r3
 80009e2:	d002      	beq.n	80009ea <cleanup_stdio+0x1e>
 80009e4:	4620      	mov	r0, r4
 80009e6:	f000 fb9f 	bl	8001128 <_fflush_r>
 80009ea:	68e1      	ldr	r1, [r4, #12]
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <cleanup_stdio+0x3c>)
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d004      	beq.n	80009fc <cleanup_stdio+0x30>
 80009f2:	4620      	mov	r0, r4
 80009f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f8:	f000 bb96 	b.w	8001128 <_fflush_r>
 80009fc:	bd10      	pop	{r4, pc}
 80009fe:	bf00      	nop
 8000a00:	200000d4 	.word	0x200000d4
 8000a04:	2000013c 	.word	0x2000013c
 8000a08:	200001a4 	.word	0x200001a4

08000a0c <global_stdio_init.part.0>:
 8000a0c:	b510      	push	{r4, lr}
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <global_stdio_init.part.0+0x30>)
 8000a10:	4c0b      	ldr	r4, [pc, #44]	; (8000a40 <global_stdio_init.part.0+0x34>)
 8000a12:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <global_stdio_init.part.0+0x38>)
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	4620      	mov	r0, r4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	f7ff ff94 	bl	8000948 <std>
 8000a20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000a24:	2201      	movs	r2, #1
 8000a26:	2109      	movs	r1, #9
 8000a28:	f7ff ff8e 	bl	8000948 <std>
 8000a2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a30:	2202      	movs	r2, #2
 8000a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a36:	2112      	movs	r1, #18
 8000a38:	f7ff bf86 	b.w	8000948 <std>
 8000a3c:	2000020c 	.word	0x2000020c
 8000a40:	200000d4 	.word	0x200000d4
 8000a44:	080009b5 	.word	0x080009b5

08000a48 <__sfp_lock_acquire>:
 8000a48:	4801      	ldr	r0, [pc, #4]	; (8000a50 <__sfp_lock_acquire+0x8>)
 8000a4a:	f000 b9ec 	b.w	8000e26 <__retarget_lock_acquire_recursive>
 8000a4e:	bf00      	nop
 8000a50:	20000215 	.word	0x20000215

08000a54 <__sfp_lock_release>:
 8000a54:	4801      	ldr	r0, [pc, #4]	; (8000a5c <__sfp_lock_release+0x8>)
 8000a56:	f000 b9e7 	b.w	8000e28 <__retarget_lock_release_recursive>
 8000a5a:	bf00      	nop
 8000a5c:	20000215 	.word	0x20000215

08000a60 <__sinit>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4604      	mov	r4, r0
 8000a64:	f7ff fff0 	bl	8000a48 <__sfp_lock_acquire>
 8000a68:	6a23      	ldr	r3, [r4, #32]
 8000a6a:	b11b      	cbz	r3, 8000a74 <__sinit+0x14>
 8000a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a70:	f7ff bff0 	b.w	8000a54 <__sfp_lock_release>
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__sinit+0x28>)
 8000a76:	6223      	str	r3, [r4, #32]
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__sinit+0x2c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f5      	bne.n	8000a6c <__sinit+0xc>
 8000a80:	f7ff ffc4 	bl	8000a0c <global_stdio_init.part.0>
 8000a84:	e7f2      	b.n	8000a6c <__sinit+0xc>
 8000a86:	bf00      	nop
 8000a88:	080009cd 	.word	0x080009cd
 8000a8c:	2000020c 	.word	0x2000020c

08000a90 <_fwalk_sglue>:
 8000a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a94:	4607      	mov	r7, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	4614      	mov	r4, r2
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000aa0:	f1b9 0901 	subs.w	r9, r9, #1
 8000aa4:	d505      	bpl.n	8000ab2 <_fwalk_sglue+0x22>
 8000aa6:	6824      	ldr	r4, [r4, #0]
 8000aa8:	2c00      	cmp	r4, #0
 8000aaa:	d1f7      	bne.n	8000a9c <_fwalk_sglue+0xc>
 8000aac:	4630      	mov	r0, r6
 8000aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ab2:	89ab      	ldrh	r3, [r5, #12]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d907      	bls.n	8000ac8 <_fwalk_sglue+0x38>
 8000ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000abc:	3301      	adds	r3, #1
 8000abe:	d003      	beq.n	8000ac8 <_fwalk_sglue+0x38>
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	4638      	mov	r0, r7
 8000ac4:	47c0      	blx	r8
 8000ac6:	4306      	orrs	r6, r0
 8000ac8:	3568      	adds	r5, #104	; 0x68
 8000aca:	e7e9      	b.n	8000aa0 <_fwalk_sglue+0x10>

08000acc <_puts_r>:
 8000acc:	6a03      	ldr	r3, [r0, #32]
 8000ace:	b570      	push	{r4, r5, r6, lr}
 8000ad0:	6884      	ldr	r4, [r0, #8]
 8000ad2:	4605      	mov	r5, r0
 8000ad4:	460e      	mov	r6, r1
 8000ad6:	b90b      	cbnz	r3, 8000adc <_puts_r+0x10>
 8000ad8:	f7ff ffc2 	bl	8000a60 <__sinit>
 8000adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ade:	07db      	lsls	r3, r3, #31
 8000ae0:	d405      	bmi.n	8000aee <_puts_r+0x22>
 8000ae2:	89a3      	ldrh	r3, [r4, #12]
 8000ae4:	0598      	lsls	r0, r3, #22
 8000ae6:	d402      	bmi.n	8000aee <_puts_r+0x22>
 8000ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000aea:	f000 f99c 	bl	8000e26 <__retarget_lock_acquire_recursive>
 8000aee:	89a3      	ldrh	r3, [r4, #12]
 8000af0:	0719      	lsls	r1, r3, #28
 8000af2:	d513      	bpl.n	8000b1c <_puts_r+0x50>
 8000af4:	6923      	ldr	r3, [r4, #16]
 8000af6:	b18b      	cbz	r3, 8000b1c <_puts_r+0x50>
 8000af8:	3e01      	subs	r6, #1
 8000afa:	68a3      	ldr	r3, [r4, #8]
 8000afc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b00:	3b01      	subs	r3, #1
 8000b02:	60a3      	str	r3, [r4, #8]
 8000b04:	b9e9      	cbnz	r1, 8000b42 <_puts_r+0x76>
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	da2e      	bge.n	8000b68 <_puts_r+0x9c>
 8000b0a:	4622      	mov	r2, r4
 8000b0c:	210a      	movs	r1, #10
 8000b0e:	4628      	mov	r0, r5
 8000b10:	f000 f87b 	bl	8000c0a <__swbuf_r>
 8000b14:	3001      	adds	r0, #1
 8000b16:	d007      	beq.n	8000b28 <_puts_r+0x5c>
 8000b18:	250a      	movs	r5, #10
 8000b1a:	e007      	b.n	8000b2c <_puts_r+0x60>
 8000b1c:	4621      	mov	r1, r4
 8000b1e:	4628      	mov	r0, r5
 8000b20:	f000 f8b0 	bl	8000c84 <__swsetup_r>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d0e7      	beq.n	8000af8 <_puts_r+0x2c>
 8000b28:	f04f 35ff 	mov.w	r5, #4294967295
 8000b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b2e:	07da      	lsls	r2, r3, #31
 8000b30:	d405      	bmi.n	8000b3e <_puts_r+0x72>
 8000b32:	89a3      	ldrh	r3, [r4, #12]
 8000b34:	059b      	lsls	r3, r3, #22
 8000b36:	d402      	bmi.n	8000b3e <_puts_r+0x72>
 8000b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b3a:	f000 f975 	bl	8000e28 <__retarget_lock_release_recursive>
 8000b3e:	4628      	mov	r0, r5
 8000b40:	bd70      	pop	{r4, r5, r6, pc}
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da04      	bge.n	8000b50 <_puts_r+0x84>
 8000b46:	69a2      	ldr	r2, [r4, #24]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dc06      	bgt.n	8000b5a <_puts_r+0x8e>
 8000b4c:	290a      	cmp	r1, #10
 8000b4e:	d004      	beq.n	8000b5a <_puts_r+0x8e>
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	6022      	str	r2, [r4, #0]
 8000b56:	7019      	strb	r1, [r3, #0]
 8000b58:	e7cf      	b.n	8000afa <_puts_r+0x2e>
 8000b5a:	4622      	mov	r2, r4
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f000 f854 	bl	8000c0a <__swbuf_r>
 8000b62:	3001      	adds	r0, #1
 8000b64:	d1c9      	bne.n	8000afa <_puts_r+0x2e>
 8000b66:	e7df      	b.n	8000b28 <_puts_r+0x5c>
 8000b68:	6823      	ldr	r3, [r4, #0]
 8000b6a:	250a      	movs	r5, #10
 8000b6c:	1c5a      	adds	r2, r3, #1
 8000b6e:	6022      	str	r2, [r4, #0]
 8000b70:	701d      	strb	r5, [r3, #0]
 8000b72:	e7db      	b.n	8000b2c <_puts_r+0x60>

08000b74 <puts>:
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <puts+0xc>)
 8000b76:	4601      	mov	r1, r0
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	f7ff bfa7 	b.w	8000acc <_puts_r>
 8000b7e:	bf00      	nop
 8000b80:	2000005c 	.word	0x2000005c

08000b84 <__sread>:
 8000b84:	b510      	push	{r4, lr}
 8000b86:	460c      	mov	r4, r1
 8000b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b8c:	f000 f8fc 	bl	8000d88 <_read_r>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	bfab      	itete	ge
 8000b94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000b96:	89a3      	ldrhlt	r3, [r4, #12]
 8000b98:	181b      	addge	r3, r3, r0
 8000b9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000b9e:	bfac      	ite	ge
 8000ba0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ba2:	81a3      	strhlt	r3, [r4, #12]
 8000ba4:	bd10      	pop	{r4, pc}

08000ba6 <__swrite>:
 8000ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000baa:	461f      	mov	r7, r3
 8000bac:	898b      	ldrh	r3, [r1, #12]
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	4605      	mov	r5, r0
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	4616      	mov	r6, r2
 8000bb6:	d505      	bpl.n	8000bc4 <__swrite+0x1e>
 8000bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f000 f8d0 	bl	8000d64 <_lseek_r>
 8000bc4:	89a3      	ldrh	r3, [r4, #12]
 8000bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bce:	81a3      	strh	r3, [r4, #12]
 8000bd0:	4632      	mov	r2, r6
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bda:	f000 b8e7 	b.w	8000dac <_write_r>

08000bde <__sseek>:
 8000bde:	b510      	push	{r4, lr}
 8000be0:	460c      	mov	r4, r1
 8000be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000be6:	f000 f8bd 	bl	8000d64 <_lseek_r>
 8000bea:	1c43      	adds	r3, r0, #1
 8000bec:	89a3      	ldrh	r3, [r4, #12]
 8000bee:	bf15      	itete	ne
 8000bf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8000bf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000bf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000bfa:	81a3      	strheq	r3, [r4, #12]
 8000bfc:	bf18      	it	ne
 8000bfe:	81a3      	strhne	r3, [r4, #12]
 8000c00:	bd10      	pop	{r4, pc}

08000c02 <__sclose>:
 8000c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c06:	f000 b89d 	b.w	8000d44 <_close_r>

08000c0a <__swbuf_r>:
 8000c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0c:	460e      	mov	r6, r1
 8000c0e:	4614      	mov	r4, r2
 8000c10:	4605      	mov	r5, r0
 8000c12:	b118      	cbz	r0, 8000c1c <__swbuf_r+0x12>
 8000c14:	6a03      	ldr	r3, [r0, #32]
 8000c16:	b90b      	cbnz	r3, 8000c1c <__swbuf_r+0x12>
 8000c18:	f7ff ff22 	bl	8000a60 <__sinit>
 8000c1c:	69a3      	ldr	r3, [r4, #24]
 8000c1e:	60a3      	str	r3, [r4, #8]
 8000c20:	89a3      	ldrh	r3, [r4, #12]
 8000c22:	071a      	lsls	r2, r3, #28
 8000c24:	d525      	bpl.n	8000c72 <__swbuf_r+0x68>
 8000c26:	6923      	ldr	r3, [r4, #16]
 8000c28:	b31b      	cbz	r3, 8000c72 <__swbuf_r+0x68>
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	6922      	ldr	r2, [r4, #16]
 8000c2e:	1a98      	subs	r0, r3, r2
 8000c30:	6963      	ldr	r3, [r4, #20]
 8000c32:	b2f6      	uxtb	r6, r6
 8000c34:	4283      	cmp	r3, r0
 8000c36:	4637      	mov	r7, r6
 8000c38:	dc04      	bgt.n	8000c44 <__swbuf_r+0x3a>
 8000c3a:	4621      	mov	r1, r4
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	f000 fa73 	bl	8001128 <_fflush_r>
 8000c42:	b9e0      	cbnz	r0, 8000c7e <__swbuf_r+0x74>
 8000c44:	68a3      	ldr	r3, [r4, #8]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60a3      	str	r3, [r4, #8]
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	6022      	str	r2, [r4, #0]
 8000c50:	701e      	strb	r6, [r3, #0]
 8000c52:	6962      	ldr	r2, [r4, #20]
 8000c54:	1c43      	adds	r3, r0, #1
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d004      	beq.n	8000c64 <__swbuf_r+0x5a>
 8000c5a:	89a3      	ldrh	r3, [r4, #12]
 8000c5c:	07db      	lsls	r3, r3, #31
 8000c5e:	d506      	bpl.n	8000c6e <__swbuf_r+0x64>
 8000c60:	2e0a      	cmp	r6, #10
 8000c62:	d104      	bne.n	8000c6e <__swbuf_r+0x64>
 8000c64:	4621      	mov	r1, r4
 8000c66:	4628      	mov	r0, r5
 8000c68:	f000 fa5e 	bl	8001128 <_fflush_r>
 8000c6c:	b938      	cbnz	r0, 8000c7e <__swbuf_r+0x74>
 8000c6e:	4638      	mov	r0, r7
 8000c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c72:	4621      	mov	r1, r4
 8000c74:	4628      	mov	r0, r5
 8000c76:	f000 f805 	bl	8000c84 <__swsetup_r>
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d0d5      	beq.n	8000c2a <__swbuf_r+0x20>
 8000c7e:	f04f 37ff 	mov.w	r7, #4294967295
 8000c82:	e7f4      	b.n	8000c6e <__swbuf_r+0x64>

08000c84 <__swsetup_r>:
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <__swsetup_r+0xac>)
 8000c88:	4605      	mov	r5, r0
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	b118      	cbz	r0, 8000c98 <__swsetup_r+0x14>
 8000c90:	6a03      	ldr	r3, [r0, #32]
 8000c92:	b90b      	cbnz	r3, 8000c98 <__swsetup_r+0x14>
 8000c94:	f7ff fee4 	bl	8000a60 <__sinit>
 8000c98:	89a3      	ldrh	r3, [r4, #12]
 8000c9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c9e:	0718      	lsls	r0, r3, #28
 8000ca0:	d422      	bmi.n	8000ce8 <__swsetup_r+0x64>
 8000ca2:	06d9      	lsls	r1, r3, #27
 8000ca4:	d407      	bmi.n	8000cb6 <__swsetup_r+0x32>
 8000ca6:	2309      	movs	r3, #9
 8000ca8:	602b      	str	r3, [r5, #0]
 8000caa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000cae:	81a3      	strh	r3, [r4, #12]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	e034      	b.n	8000d20 <__swsetup_r+0x9c>
 8000cb6:	0758      	lsls	r0, r3, #29
 8000cb8:	d512      	bpl.n	8000ce0 <__swsetup_r+0x5c>
 8000cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cbc:	b141      	cbz	r1, 8000cd0 <__swsetup_r+0x4c>
 8000cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d002      	beq.n	8000ccc <__swsetup_r+0x48>
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f000 f8b0 	bl	8000e2c <_free_r>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	6363      	str	r3, [r4, #52]	; 0x34
 8000cd0:	89a3      	ldrh	r3, [r4, #12]
 8000cd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000cd6:	81a3      	strh	r3, [r4, #12]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6063      	str	r3, [r4, #4]
 8000cdc:	6923      	ldr	r3, [r4, #16]
 8000cde:	6023      	str	r3, [r4, #0]
 8000ce0:	89a3      	ldrh	r3, [r4, #12]
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	81a3      	strh	r3, [r4, #12]
 8000ce8:	6923      	ldr	r3, [r4, #16]
 8000cea:	b94b      	cbnz	r3, 8000d00 <__swsetup_r+0x7c>
 8000cec:	89a3      	ldrh	r3, [r4, #12]
 8000cee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cf6:	d003      	beq.n	8000d00 <__swsetup_r+0x7c>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	f000 fa62 	bl	80011c4 <__smakebuf_r>
 8000d00:	89a0      	ldrh	r0, [r4, #12]
 8000d02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d06:	f010 0301 	ands.w	r3, r0, #1
 8000d0a:	d00a      	beq.n	8000d22 <__swsetup_r+0x9e>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60a3      	str	r3, [r4, #8]
 8000d10:	6963      	ldr	r3, [r4, #20]
 8000d12:	425b      	negs	r3, r3
 8000d14:	61a3      	str	r3, [r4, #24]
 8000d16:	6923      	ldr	r3, [r4, #16]
 8000d18:	b943      	cbnz	r3, 8000d2c <__swsetup_r+0xa8>
 8000d1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d1e:	d1c4      	bne.n	8000caa <__swsetup_r+0x26>
 8000d20:	bd38      	pop	{r3, r4, r5, pc}
 8000d22:	0781      	lsls	r1, r0, #30
 8000d24:	bf58      	it	pl
 8000d26:	6963      	ldrpl	r3, [r4, #20]
 8000d28:	60a3      	str	r3, [r4, #8]
 8000d2a:	e7f4      	b.n	8000d16 <__swsetup_r+0x92>
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	e7f7      	b.n	8000d20 <__swsetup_r+0x9c>
 8000d30:	2000005c 	.word	0x2000005c

08000d34 <memset>:
 8000d34:	4402      	add	r2, r0
 8000d36:	4603      	mov	r3, r0
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d100      	bne.n	8000d3e <memset+0xa>
 8000d3c:	4770      	bx	lr
 8000d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d42:	e7f9      	b.n	8000d38 <memset+0x4>

08000d44 <_close_r>:
 8000d44:	b538      	push	{r3, r4, r5, lr}
 8000d46:	4d06      	ldr	r5, [pc, #24]	; (8000d60 <_close_r+0x1c>)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	602b      	str	r3, [r5, #0]
 8000d50:	f7ff fd65 	bl	800081e <_close>
 8000d54:	1c43      	adds	r3, r0, #1
 8000d56:	d102      	bne.n	8000d5e <_close_r+0x1a>
 8000d58:	682b      	ldr	r3, [r5, #0]
 8000d5a:	b103      	cbz	r3, 8000d5e <_close_r+0x1a>
 8000d5c:	6023      	str	r3, [r4, #0]
 8000d5e:	bd38      	pop	{r3, r4, r5, pc}
 8000d60:	20000210 	.word	0x20000210

08000d64 <_lseek_r>:
 8000d64:	b538      	push	{r3, r4, r5, lr}
 8000d66:	4d07      	ldr	r5, [pc, #28]	; (8000d84 <_lseek_r+0x20>)
 8000d68:	4604      	mov	r4, r0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	2200      	movs	r2, #0
 8000d70:	602a      	str	r2, [r5, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	f7ff fd7a 	bl	800086c <_lseek>
 8000d78:	1c43      	adds	r3, r0, #1
 8000d7a:	d102      	bne.n	8000d82 <_lseek_r+0x1e>
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	b103      	cbz	r3, 8000d82 <_lseek_r+0x1e>
 8000d80:	6023      	str	r3, [r4, #0]
 8000d82:	bd38      	pop	{r3, r4, r5, pc}
 8000d84:	20000210 	.word	0x20000210

08000d88 <_read_r>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	4d07      	ldr	r5, [pc, #28]	; (8000da8 <_read_r+0x20>)
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	4611      	mov	r1, r2
 8000d92:	2200      	movs	r2, #0
 8000d94:	602a      	str	r2, [r5, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	f7ff fd08 	bl	80007ac <_read>
 8000d9c:	1c43      	adds	r3, r0, #1
 8000d9e:	d102      	bne.n	8000da6 <_read_r+0x1e>
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	b103      	cbz	r3, 8000da6 <_read_r+0x1e>
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
 8000da8:	20000210 	.word	0x20000210

08000dac <_write_r>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	4d07      	ldr	r5, [pc, #28]	; (8000dcc <_write_r+0x20>)
 8000db0:	4604      	mov	r4, r0
 8000db2:	4608      	mov	r0, r1
 8000db4:	4611      	mov	r1, r2
 8000db6:	2200      	movs	r2, #0
 8000db8:	602a      	str	r2, [r5, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f7ff fd13 	bl	80007e6 <_write>
 8000dc0:	1c43      	adds	r3, r0, #1
 8000dc2:	d102      	bne.n	8000dca <_write_r+0x1e>
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	b103      	cbz	r3, 8000dca <_write_r+0x1e>
 8000dc8:	6023      	str	r3, [r4, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	20000210 	.word	0x20000210

08000dd0 <__errno>:
 8000dd0:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <__errno+0x8>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000005c 	.word	0x2000005c

08000ddc <__libc_init_array>:
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	4d0d      	ldr	r5, [pc, #52]	; (8000e14 <__libc_init_array+0x38>)
 8000de0:	4c0d      	ldr	r4, [pc, #52]	; (8000e18 <__libc_init_array+0x3c>)
 8000de2:	1b64      	subs	r4, r4, r5
 8000de4:	10a4      	asrs	r4, r4, #2
 8000de6:	2600      	movs	r6, #0
 8000de8:	42a6      	cmp	r6, r4
 8000dea:	d109      	bne.n	8000e00 <__libc_init_array+0x24>
 8000dec:	4d0b      	ldr	r5, [pc, #44]	; (8000e1c <__libc_init_array+0x40>)
 8000dee:	4c0c      	ldr	r4, [pc, #48]	; (8000e20 <__libc_init_array+0x44>)
 8000df0:	f000 fa56 	bl	80012a0 <_init>
 8000df4:	1b64      	subs	r4, r4, r5
 8000df6:	10a4      	asrs	r4, r4, #2
 8000df8:	2600      	movs	r6, #0
 8000dfa:	42a6      	cmp	r6, r4
 8000dfc:	d105      	bne.n	8000e0a <__libc_init_array+0x2e>
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
 8000e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e04:	4798      	blx	r3
 8000e06:	3601      	adds	r6, #1
 8000e08:	e7ee      	b.n	8000de8 <__libc_init_array+0xc>
 8000e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e0e:	4798      	blx	r3
 8000e10:	3601      	adds	r6, #1
 8000e12:	e7f2      	b.n	8000dfa <__libc_init_array+0x1e>
 8000e14:	08001300 	.word	0x08001300
 8000e18:	08001300 	.word	0x08001300
 8000e1c:	08001300 	.word	0x08001300
 8000e20:	08001304 	.word	0x08001304

08000e24 <__retarget_lock_init_recursive>:
 8000e24:	4770      	bx	lr

08000e26 <__retarget_lock_acquire_recursive>:
 8000e26:	4770      	bx	lr

08000e28 <__retarget_lock_release_recursive>:
 8000e28:	4770      	bx	lr
	...

08000e2c <_free_r>:
 8000e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d044      	beq.n	8000ebc <_free_r+0x90>
 8000e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e36:	9001      	str	r0, [sp, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8000e3e:	bfb8      	it	lt
 8000e40:	18e4      	addlt	r4, r4, r3
 8000e42:	f000 f8df 	bl	8001004 <__malloc_lock>
 8000e46:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <_free_r+0x94>)
 8000e48:	9801      	ldr	r0, [sp, #4]
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	b933      	cbnz	r3, 8000e5c <_free_r+0x30>
 8000e4e:	6063      	str	r3, [r4, #4]
 8000e50:	6014      	str	r4, [r2, #0]
 8000e52:	b003      	add	sp, #12
 8000e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e58:	f000 b8da 	b.w	8001010 <__malloc_unlock>
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d908      	bls.n	8000e72 <_free_r+0x46>
 8000e60:	6825      	ldr	r5, [r4, #0]
 8000e62:	1961      	adds	r1, r4, r5
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf01      	itttt	eq
 8000e68:	6819      	ldreq	r1, [r3, #0]
 8000e6a:	685b      	ldreq	r3, [r3, #4]
 8000e6c:	1949      	addeq	r1, r1, r5
 8000e6e:	6021      	streq	r1, [r4, #0]
 8000e70:	e7ed      	b.n	8000e4e <_free_r+0x22>
 8000e72:	461a      	mov	r2, r3
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	b10b      	cbz	r3, 8000e7c <_free_r+0x50>
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d9fa      	bls.n	8000e72 <_free_r+0x46>
 8000e7c:	6811      	ldr	r1, [r2, #0]
 8000e7e:	1855      	adds	r5, r2, r1
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	d10b      	bne.n	8000e9c <_free_r+0x70>
 8000e84:	6824      	ldr	r4, [r4, #0]
 8000e86:	4421      	add	r1, r4
 8000e88:	1854      	adds	r4, r2, r1
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	6011      	str	r1, [r2, #0]
 8000e8e:	d1e0      	bne.n	8000e52 <_free_r+0x26>
 8000e90:	681c      	ldr	r4, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	6053      	str	r3, [r2, #4]
 8000e96:	440c      	add	r4, r1
 8000e98:	6014      	str	r4, [r2, #0]
 8000e9a:	e7da      	b.n	8000e52 <_free_r+0x26>
 8000e9c:	d902      	bls.n	8000ea4 <_free_r+0x78>
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	6003      	str	r3, [r0, #0]
 8000ea2:	e7d6      	b.n	8000e52 <_free_r+0x26>
 8000ea4:	6825      	ldr	r5, [r4, #0]
 8000ea6:	1961      	adds	r1, r4, r5
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf04      	itt	eq
 8000eac:	6819      	ldreq	r1, [r3, #0]
 8000eae:	685b      	ldreq	r3, [r3, #4]
 8000eb0:	6063      	str	r3, [r4, #4]
 8000eb2:	bf04      	itt	eq
 8000eb4:	1949      	addeq	r1, r1, r5
 8000eb6:	6021      	streq	r1, [r4, #0]
 8000eb8:	6054      	str	r4, [r2, #4]
 8000eba:	e7ca      	b.n	8000e52 <_free_r+0x26>
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd30      	pop	{r4, r5, pc}
 8000ec0:	20000218 	.word	0x20000218

08000ec4 <sbrk_aligned>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	4e0e      	ldr	r6, [pc, #56]	; (8000f00 <sbrk_aligned+0x3c>)
 8000ec8:	460c      	mov	r4, r1
 8000eca:	6831      	ldr	r1, [r6, #0]
 8000ecc:	4605      	mov	r5, r0
 8000ece:	b911      	cbnz	r1, 8000ed6 <sbrk_aligned+0x12>
 8000ed0:	f000 f9d6 	bl	8001280 <_sbrk_r>
 8000ed4:	6030      	str	r0, [r6, #0]
 8000ed6:	4621      	mov	r1, r4
 8000ed8:	4628      	mov	r0, r5
 8000eda:	f000 f9d1 	bl	8001280 <_sbrk_r>
 8000ede:	1c43      	adds	r3, r0, #1
 8000ee0:	d00a      	beq.n	8000ef8 <sbrk_aligned+0x34>
 8000ee2:	1cc4      	adds	r4, r0, #3
 8000ee4:	f024 0403 	bic.w	r4, r4, #3
 8000ee8:	42a0      	cmp	r0, r4
 8000eea:	d007      	beq.n	8000efc <sbrk_aligned+0x38>
 8000eec:	1a21      	subs	r1, r4, r0
 8000eee:	4628      	mov	r0, r5
 8000ef0:	f000 f9c6 	bl	8001280 <_sbrk_r>
 8000ef4:	3001      	adds	r0, #1
 8000ef6:	d101      	bne.n	8000efc <sbrk_aligned+0x38>
 8000ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8000efc:	4620      	mov	r0, r4
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
 8000f00:	2000021c 	.word	0x2000021c

08000f04 <_malloc_r>:
 8000f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f08:	1ccd      	adds	r5, r1, #3
 8000f0a:	f025 0503 	bic.w	r5, r5, #3
 8000f0e:	3508      	adds	r5, #8
 8000f10:	2d0c      	cmp	r5, #12
 8000f12:	bf38      	it	cc
 8000f14:	250c      	movcc	r5, #12
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	4607      	mov	r7, r0
 8000f1a:	db01      	blt.n	8000f20 <_malloc_r+0x1c>
 8000f1c:	42a9      	cmp	r1, r5
 8000f1e:	d905      	bls.n	8000f2c <_malloc_r+0x28>
 8000f20:	230c      	movs	r3, #12
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	2600      	movs	r6, #0
 8000f26:	4630      	mov	r0, r6
 8000f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001000 <_malloc_r+0xfc>
 8000f30:	f000 f868 	bl	8001004 <__malloc_lock>
 8000f34:	f8d8 3000 	ldr.w	r3, [r8]
 8000f38:	461c      	mov	r4, r3
 8000f3a:	bb5c      	cbnz	r4, 8000f94 <_malloc_r+0x90>
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	4638      	mov	r0, r7
 8000f40:	f7ff ffc0 	bl	8000ec4 <sbrk_aligned>
 8000f44:	1c43      	adds	r3, r0, #1
 8000f46:	4604      	mov	r4, r0
 8000f48:	d155      	bne.n	8000ff6 <_malloc_r+0xf2>
 8000f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8000f4e:	4626      	mov	r6, r4
 8000f50:	2e00      	cmp	r6, #0
 8000f52:	d145      	bne.n	8000fe0 <_malloc_r+0xdc>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d048      	beq.n	8000fea <_malloc_r+0xe6>
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	4631      	mov	r1, r6
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	eb04 0903 	add.w	r9, r4, r3
 8000f62:	f000 f98d 	bl	8001280 <_sbrk_r>
 8000f66:	4581      	cmp	r9, r0
 8000f68:	d13f      	bne.n	8000fea <_malloc_r+0xe6>
 8000f6a:	6821      	ldr	r1, [r4, #0]
 8000f6c:	1a6d      	subs	r5, r5, r1
 8000f6e:	4629      	mov	r1, r5
 8000f70:	4638      	mov	r0, r7
 8000f72:	f7ff ffa7 	bl	8000ec4 <sbrk_aligned>
 8000f76:	3001      	adds	r0, #1
 8000f78:	d037      	beq.n	8000fea <_malloc_r+0xe6>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	442b      	add	r3, r5
 8000f7e:	6023      	str	r3, [r4, #0]
 8000f80:	f8d8 3000 	ldr.w	r3, [r8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d038      	beq.n	8000ffa <_malloc_r+0xf6>
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	42a2      	cmp	r2, r4
 8000f8c:	d12b      	bne.n	8000fe6 <_malloc_r+0xe2>
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	e00f      	b.n	8000fb4 <_malloc_r+0xb0>
 8000f94:	6822      	ldr	r2, [r4, #0]
 8000f96:	1b52      	subs	r2, r2, r5
 8000f98:	d41f      	bmi.n	8000fda <_malloc_r+0xd6>
 8000f9a:	2a0b      	cmp	r2, #11
 8000f9c:	d917      	bls.n	8000fce <_malloc_r+0xca>
 8000f9e:	1961      	adds	r1, r4, r5
 8000fa0:	42a3      	cmp	r3, r4
 8000fa2:	6025      	str	r5, [r4, #0]
 8000fa4:	bf18      	it	ne
 8000fa6:	6059      	strne	r1, [r3, #4]
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	bf08      	it	eq
 8000fac:	f8c8 1000 	streq.w	r1, [r8]
 8000fb0:	5162      	str	r2, [r4, r5]
 8000fb2:	604b      	str	r3, [r1, #4]
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	f104 060b 	add.w	r6, r4, #11
 8000fba:	f000 f829 	bl	8001010 <__malloc_unlock>
 8000fbe:	f026 0607 	bic.w	r6, r6, #7
 8000fc2:	1d23      	adds	r3, r4, #4
 8000fc4:	1af2      	subs	r2, r6, r3
 8000fc6:	d0ae      	beq.n	8000f26 <_malloc_r+0x22>
 8000fc8:	1b9b      	subs	r3, r3, r6
 8000fca:	50a3      	str	r3, [r4, r2]
 8000fcc:	e7ab      	b.n	8000f26 <_malloc_r+0x22>
 8000fce:	42a3      	cmp	r3, r4
 8000fd0:	6862      	ldr	r2, [r4, #4]
 8000fd2:	d1dd      	bne.n	8000f90 <_malloc_r+0x8c>
 8000fd4:	f8c8 2000 	str.w	r2, [r8]
 8000fd8:	e7ec      	b.n	8000fb4 <_malloc_r+0xb0>
 8000fda:	4623      	mov	r3, r4
 8000fdc:	6864      	ldr	r4, [r4, #4]
 8000fde:	e7ac      	b.n	8000f3a <_malloc_r+0x36>
 8000fe0:	4634      	mov	r4, r6
 8000fe2:	6876      	ldr	r6, [r6, #4]
 8000fe4:	e7b4      	b.n	8000f50 <_malloc_r+0x4c>
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	e7cc      	b.n	8000f84 <_malloc_r+0x80>
 8000fea:	230c      	movs	r3, #12
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4638      	mov	r0, r7
 8000ff0:	f000 f80e 	bl	8001010 <__malloc_unlock>
 8000ff4:	e797      	b.n	8000f26 <_malloc_r+0x22>
 8000ff6:	6025      	str	r5, [r4, #0]
 8000ff8:	e7dc      	b.n	8000fb4 <_malloc_r+0xb0>
 8000ffa:	605b      	str	r3, [r3, #4]
 8000ffc:	deff      	udf	#255	; 0xff
 8000ffe:	bf00      	nop
 8001000:	20000218 	.word	0x20000218

08001004 <__malloc_lock>:
 8001004:	4801      	ldr	r0, [pc, #4]	; (800100c <__malloc_lock+0x8>)
 8001006:	f7ff bf0e 	b.w	8000e26 <__retarget_lock_acquire_recursive>
 800100a:	bf00      	nop
 800100c:	20000214 	.word	0x20000214

08001010 <__malloc_unlock>:
 8001010:	4801      	ldr	r0, [pc, #4]	; (8001018 <__malloc_unlock+0x8>)
 8001012:	f7ff bf09 	b.w	8000e28 <__retarget_lock_release_recursive>
 8001016:	bf00      	nop
 8001018:	20000214 	.word	0x20000214

0800101c <__sflush_r>:
 800101c:	898a      	ldrh	r2, [r1, #12]
 800101e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001022:	4605      	mov	r5, r0
 8001024:	0710      	lsls	r0, r2, #28
 8001026:	460c      	mov	r4, r1
 8001028:	d458      	bmi.n	80010dc <__sflush_r+0xc0>
 800102a:	684b      	ldr	r3, [r1, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	dc05      	bgt.n	800103c <__sflush_r+0x20>
 8001030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001032:	2b00      	cmp	r3, #0
 8001034:	dc02      	bgt.n	800103c <__sflush_r+0x20>
 8001036:	2000      	movs	r0, #0
 8001038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800103c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800103e:	2e00      	cmp	r6, #0
 8001040:	d0f9      	beq.n	8001036 <__sflush_r+0x1a>
 8001042:	2300      	movs	r3, #0
 8001044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001048:	682f      	ldr	r7, [r5, #0]
 800104a:	6a21      	ldr	r1, [r4, #32]
 800104c:	602b      	str	r3, [r5, #0]
 800104e:	d032      	beq.n	80010b6 <__sflush_r+0x9a>
 8001050:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001052:	89a3      	ldrh	r3, [r4, #12]
 8001054:	075a      	lsls	r2, r3, #29
 8001056:	d505      	bpl.n	8001064 <__sflush_r+0x48>
 8001058:	6863      	ldr	r3, [r4, #4]
 800105a:	1ac0      	subs	r0, r0, r3
 800105c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800105e:	b10b      	cbz	r3, 8001064 <__sflush_r+0x48>
 8001060:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001062:	1ac0      	subs	r0, r0, r3
 8001064:	2300      	movs	r3, #0
 8001066:	4602      	mov	r2, r0
 8001068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800106a:	6a21      	ldr	r1, [r4, #32]
 800106c:	4628      	mov	r0, r5
 800106e:	47b0      	blx	r6
 8001070:	1c43      	adds	r3, r0, #1
 8001072:	89a3      	ldrh	r3, [r4, #12]
 8001074:	d106      	bne.n	8001084 <__sflush_r+0x68>
 8001076:	6829      	ldr	r1, [r5, #0]
 8001078:	291d      	cmp	r1, #29
 800107a:	d82b      	bhi.n	80010d4 <__sflush_r+0xb8>
 800107c:	4a29      	ldr	r2, [pc, #164]	; (8001124 <__sflush_r+0x108>)
 800107e:	410a      	asrs	r2, r1
 8001080:	07d6      	lsls	r6, r2, #31
 8001082:	d427      	bmi.n	80010d4 <__sflush_r+0xb8>
 8001084:	2200      	movs	r2, #0
 8001086:	6062      	str	r2, [r4, #4]
 8001088:	04d9      	lsls	r1, r3, #19
 800108a:	6922      	ldr	r2, [r4, #16]
 800108c:	6022      	str	r2, [r4, #0]
 800108e:	d504      	bpl.n	800109a <__sflush_r+0x7e>
 8001090:	1c42      	adds	r2, r0, #1
 8001092:	d101      	bne.n	8001098 <__sflush_r+0x7c>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b903      	cbnz	r3, 800109a <__sflush_r+0x7e>
 8001098:	6560      	str	r0, [r4, #84]	; 0x54
 800109a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800109c:	602f      	str	r7, [r5, #0]
 800109e:	2900      	cmp	r1, #0
 80010a0:	d0c9      	beq.n	8001036 <__sflush_r+0x1a>
 80010a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010a6:	4299      	cmp	r1, r3
 80010a8:	d002      	beq.n	80010b0 <__sflush_r+0x94>
 80010aa:	4628      	mov	r0, r5
 80010ac:	f7ff febe 	bl	8000e2c <_free_r>
 80010b0:	2000      	movs	r0, #0
 80010b2:	6360      	str	r0, [r4, #52]	; 0x34
 80010b4:	e7c0      	b.n	8001038 <__sflush_r+0x1c>
 80010b6:	2301      	movs	r3, #1
 80010b8:	4628      	mov	r0, r5
 80010ba:	47b0      	blx	r6
 80010bc:	1c41      	adds	r1, r0, #1
 80010be:	d1c8      	bne.n	8001052 <__sflush_r+0x36>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0c5      	beq.n	8001052 <__sflush_r+0x36>
 80010c6:	2b1d      	cmp	r3, #29
 80010c8:	d001      	beq.n	80010ce <__sflush_r+0xb2>
 80010ca:	2b16      	cmp	r3, #22
 80010cc:	d101      	bne.n	80010d2 <__sflush_r+0xb6>
 80010ce:	602f      	str	r7, [r5, #0]
 80010d0:	e7b1      	b.n	8001036 <__sflush_r+0x1a>
 80010d2:	89a3      	ldrh	r3, [r4, #12]
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	81a3      	strh	r3, [r4, #12]
 80010da:	e7ad      	b.n	8001038 <__sflush_r+0x1c>
 80010dc:	690f      	ldr	r7, [r1, #16]
 80010de:	2f00      	cmp	r7, #0
 80010e0:	d0a9      	beq.n	8001036 <__sflush_r+0x1a>
 80010e2:	0793      	lsls	r3, r2, #30
 80010e4:	680e      	ldr	r6, [r1, #0]
 80010e6:	bf08      	it	eq
 80010e8:	694b      	ldreq	r3, [r1, #20]
 80010ea:	600f      	str	r7, [r1, #0]
 80010ec:	bf18      	it	ne
 80010ee:	2300      	movne	r3, #0
 80010f0:	eba6 0807 	sub.w	r8, r6, r7
 80010f4:	608b      	str	r3, [r1, #8]
 80010f6:	f1b8 0f00 	cmp.w	r8, #0
 80010fa:	dd9c      	ble.n	8001036 <__sflush_r+0x1a>
 80010fc:	6a21      	ldr	r1, [r4, #32]
 80010fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001100:	4643      	mov	r3, r8
 8001102:	463a      	mov	r2, r7
 8001104:	4628      	mov	r0, r5
 8001106:	47b0      	blx	r6
 8001108:	2800      	cmp	r0, #0
 800110a:	dc06      	bgt.n	800111a <__sflush_r+0xfe>
 800110c:	89a3      	ldrh	r3, [r4, #12]
 800110e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001112:	81a3      	strh	r3, [r4, #12]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	e78e      	b.n	8001038 <__sflush_r+0x1c>
 800111a:	4407      	add	r7, r0
 800111c:	eba8 0800 	sub.w	r8, r8, r0
 8001120:	e7e9      	b.n	80010f6 <__sflush_r+0xda>
 8001122:	bf00      	nop
 8001124:	dfbffffe 	.word	0xdfbffffe

08001128 <_fflush_r>:
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	690b      	ldr	r3, [r1, #16]
 800112c:	4605      	mov	r5, r0
 800112e:	460c      	mov	r4, r1
 8001130:	b913      	cbnz	r3, 8001138 <_fflush_r+0x10>
 8001132:	2500      	movs	r5, #0
 8001134:	4628      	mov	r0, r5
 8001136:	bd38      	pop	{r3, r4, r5, pc}
 8001138:	b118      	cbz	r0, 8001142 <_fflush_r+0x1a>
 800113a:	6a03      	ldr	r3, [r0, #32]
 800113c:	b90b      	cbnz	r3, 8001142 <_fflush_r+0x1a>
 800113e:	f7ff fc8f 	bl	8000a60 <__sinit>
 8001142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f3      	beq.n	8001132 <_fflush_r+0xa>
 800114a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800114c:	07d0      	lsls	r0, r2, #31
 800114e:	d404      	bmi.n	800115a <_fflush_r+0x32>
 8001150:	0599      	lsls	r1, r3, #22
 8001152:	d402      	bmi.n	800115a <_fflush_r+0x32>
 8001154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001156:	f7ff fe66 	bl	8000e26 <__retarget_lock_acquire_recursive>
 800115a:	4628      	mov	r0, r5
 800115c:	4621      	mov	r1, r4
 800115e:	f7ff ff5d 	bl	800101c <__sflush_r>
 8001162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001164:	07da      	lsls	r2, r3, #31
 8001166:	4605      	mov	r5, r0
 8001168:	d4e4      	bmi.n	8001134 <_fflush_r+0xc>
 800116a:	89a3      	ldrh	r3, [r4, #12]
 800116c:	059b      	lsls	r3, r3, #22
 800116e:	d4e1      	bmi.n	8001134 <_fflush_r+0xc>
 8001170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001172:	f7ff fe59 	bl	8000e28 <__retarget_lock_release_recursive>
 8001176:	e7dd      	b.n	8001134 <_fflush_r+0xc>

08001178 <__swhatbuf_r>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	460c      	mov	r4, r1
 800117c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001180:	2900      	cmp	r1, #0
 8001182:	b096      	sub	sp, #88	; 0x58
 8001184:	4615      	mov	r5, r2
 8001186:	461e      	mov	r6, r3
 8001188:	da0d      	bge.n	80011a6 <__swhatbuf_r+0x2e>
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001190:	f04f 0100 	mov.w	r1, #0
 8001194:	bf0c      	ite	eq
 8001196:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800119a:	2340      	movne	r3, #64	; 0x40
 800119c:	2000      	movs	r0, #0
 800119e:	6031      	str	r1, [r6, #0]
 80011a0:	602b      	str	r3, [r5, #0]
 80011a2:	b016      	add	sp, #88	; 0x58
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
 80011a6:	466a      	mov	r2, sp
 80011a8:	f000 f848 	bl	800123c <_fstat_r>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	dbec      	blt.n	800118a <__swhatbuf_r+0x12>
 80011b0:	9901      	ldr	r1, [sp, #4]
 80011b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80011b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80011ba:	4259      	negs	r1, r3
 80011bc:	4159      	adcs	r1, r3
 80011be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c2:	e7eb      	b.n	800119c <__swhatbuf_r+0x24>

080011c4 <__smakebuf_r>:
 80011c4:	898b      	ldrh	r3, [r1, #12]
 80011c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011c8:	079d      	lsls	r5, r3, #30
 80011ca:	4606      	mov	r6, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	d507      	bpl.n	80011e0 <__smakebuf_r+0x1c>
 80011d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	6123      	str	r3, [r4, #16]
 80011d8:	2301      	movs	r3, #1
 80011da:	6163      	str	r3, [r4, #20]
 80011dc:	b002      	add	sp, #8
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	ab01      	add	r3, sp, #4
 80011e2:	466a      	mov	r2, sp
 80011e4:	f7ff ffc8 	bl	8001178 <__swhatbuf_r>
 80011e8:	9900      	ldr	r1, [sp, #0]
 80011ea:	4605      	mov	r5, r0
 80011ec:	4630      	mov	r0, r6
 80011ee:	f7ff fe89 	bl	8000f04 <_malloc_r>
 80011f2:	b948      	cbnz	r0, 8001208 <__smakebuf_r+0x44>
 80011f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011f8:	059a      	lsls	r2, r3, #22
 80011fa:	d4ef      	bmi.n	80011dc <__smakebuf_r+0x18>
 80011fc:	f023 0303 	bic.w	r3, r3, #3
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	81a3      	strh	r3, [r4, #12]
 8001206:	e7e3      	b.n	80011d0 <__smakebuf_r+0xc>
 8001208:	89a3      	ldrh	r3, [r4, #12]
 800120a:	6020      	str	r0, [r4, #0]
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	81a3      	strh	r3, [r4, #12]
 8001212:	9b00      	ldr	r3, [sp, #0]
 8001214:	6163      	str	r3, [r4, #20]
 8001216:	9b01      	ldr	r3, [sp, #4]
 8001218:	6120      	str	r0, [r4, #16]
 800121a:	b15b      	cbz	r3, 8001234 <__smakebuf_r+0x70>
 800121c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001220:	4630      	mov	r0, r6
 8001222:	f000 f81d 	bl	8001260 <_isatty_r>
 8001226:	b128      	cbz	r0, 8001234 <__smakebuf_r+0x70>
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	f023 0303 	bic.w	r3, r3, #3
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	81a3      	strh	r3, [r4, #12]
 8001234:	89a3      	ldrh	r3, [r4, #12]
 8001236:	431d      	orrs	r5, r3
 8001238:	81a5      	strh	r5, [r4, #12]
 800123a:	e7cf      	b.n	80011dc <__smakebuf_r+0x18>

0800123c <_fstat_r>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	4d07      	ldr	r5, [pc, #28]	; (800125c <_fstat_r+0x20>)
 8001240:	2300      	movs	r3, #0
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	602b      	str	r3, [r5, #0]
 800124a:	f7ff faf4 	bl	8000836 <_fstat>
 800124e:	1c43      	adds	r3, r0, #1
 8001250:	d102      	bne.n	8001258 <_fstat_r+0x1c>
 8001252:	682b      	ldr	r3, [r5, #0]
 8001254:	b103      	cbz	r3, 8001258 <_fstat_r+0x1c>
 8001256:	6023      	str	r3, [r4, #0]
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	bf00      	nop
 800125c:	20000210 	.word	0x20000210

08001260 <_isatty_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4d06      	ldr	r5, [pc, #24]	; (800127c <_isatty_r+0x1c>)
 8001264:	2300      	movs	r3, #0
 8001266:	4604      	mov	r4, r0
 8001268:	4608      	mov	r0, r1
 800126a:	602b      	str	r3, [r5, #0]
 800126c:	f7ff faf3 	bl	8000856 <_isatty>
 8001270:	1c43      	adds	r3, r0, #1
 8001272:	d102      	bne.n	800127a <_isatty_r+0x1a>
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	b103      	cbz	r3, 800127a <_isatty_r+0x1a>
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	20000210 	.word	0x20000210

08001280 <_sbrk_r>:
 8001280:	b538      	push	{r3, r4, r5, lr}
 8001282:	4d06      	ldr	r5, [pc, #24]	; (800129c <_sbrk_r+0x1c>)
 8001284:	2300      	movs	r3, #0
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	602b      	str	r3, [r5, #0]
 800128c:	f7ff fafc 	bl	8000888 <_sbrk>
 8001290:	1c43      	adds	r3, r0, #1
 8001292:	d102      	bne.n	800129a <_sbrk_r+0x1a>
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	b103      	cbz	r3, 800129a <_sbrk_r+0x1a>
 8001298:	6023      	str	r3, [r4, #0]
 800129a:	bd38      	pop	{r3, r4, r5, pc}
 800129c:	20000210 	.word	0x20000210

080012a0 <_init>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	bf00      	nop
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr

080012ac <_fini>:
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	bf00      	nop
 80012b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b2:	bc08      	pop	{r3}
 80012b4:	469e      	mov	lr, r3
 80012b6:	4770      	bx	lr
